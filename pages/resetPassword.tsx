import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Image from "next/image";
import Head from "next/head";
import { userService } from "../Services/userService";
import { alertService } from "../Services/alertService";
import { faEye } from "@fortawesome/free-solid-svg-icons";
import { faEyeSlash } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Link from "next/link";
import { useFormik } from "formik";
import * as Yup from "yup";
import InputFields from "../components/general/InputFields";
import Navbar from "../components/landingPage/Navbar";

const resetPassword = () => {
  const [isLoggingIn, setisLoggingIn] = useState(false);

  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const [show, setshow] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const router = useRouter();
  const { token, email } = router.query;

  const validate = Yup.object({
    password: Yup.string()
      .min(6, "Password must be at least 6 characters")
      .required("Required"),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref("password"), null], "Password must match")
      .required("Required"),
  });
  const onSubmit = (values: any) => {
    setisLoggingIn(true);

    const data = {
      password: values.password,
      email: email,
      token: token,
    };
    console.log("//////////////////////////////", data);

    const result = userService
      .resetPassword(data)
      .then(() => {
        // get return url from query parameters or default to '/'
        //const returnUrl = router.query.returnUrl || "/dashboard";
        alertService.success("password reset successful");

        setshow(true);
      })
      .catch(() => {
        alertService.error("something went wrong");
        setshow(false);
      })
      .finally(() => {
        setisLoggingIn(false);
      });

    setPassword("");
    setConfirmPassword("");
    //alert(JSON.stringify(values));
  };

  const formik = useFormik({
    initialValues: { password: "", confirmPassword: "" },
    validateOnBlur: true,
    onSubmit,
    validationSchema: validate,
  });
  console.log("form error", formik.errors);

  useEffect(() => {
    console.log("token", token);
    console.log("email", email);
  }, []);

  const handlePasswordToggle = () => {
    setShowPassword(!showPassword);
  };
  const handleConfirmPasswordToggle = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  return (
    <div>
      <Navbar />
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/cashfer favicon.svg" />
      </Head>
      {show == true ? (
        <div className="w-10/12 lg:w-3/12 mx-auto  bg-cashfer-medium-purple dark:bg-gray-800 p-12 rounded-md mt-8">
          Password Reset Successful
          <Link href="/login">
            <div className="bg-cashfer-purple text-white rounded-lg text-center mt-8 hover:opacity-90">
              <button className="w-full h-full p-3">Goto Login</button>
            </div>
          </Link>
        </div>
      ) : (
        <form onSubmit={formik.handleSubmit}>
          <div className="w-11/12 lg:w-4/12 mx-auto  bg-cashfer-medium-purple dark:bg-gray-800 p-12 rounded-md mt-8">
            <div className="text-2xl">Reset Password</div>
            <p className="mb-8 text-xs mt-4">
              change your password to access your account
            </p>

            <div className="flex justify-between items-end mb-12">
              <div className="flex-col flex-grow">
                {" "}
                <InputFields
                  type={showPassword ? "text" : "password"}
                  name="password"
                  label="New Password"
                  value={formik.values.password}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                />
                {formik.touched.password && formik.errors.password ? (
                  <div className="absolute text-xs text-red-700 mt-1">
                    {formik.errors.password}
                  </div>
                ) : null}
              </div>

              <div
                onClick={handlePasswordToggle}
                className="ml-1 border p-1 h-9"
              >
                {showPassword ? (
                  <FontAwesomeIcon
                    size="1x"
                    color="#644C99"
                    icon={faEyeSlash}
                  ></FontAwesomeIcon>
                ) : (
                  <FontAwesomeIcon
                    size="1x"
                    color="#644C99"
                    icon={faEye}
                  ></FontAwesomeIcon>
                )}{" "}
              </div>
            </div>

            <div className="flex justify-between items-end mt-8 mb-16">
              <div className="flex-col flex-grow">
                {" "}
                <InputFields
                  type={showConfirmPassword ? "text" : "password"}
                  name="confirmPassword"
                  label="Confirm New Password"
                  value={formik.values.confirmPassword}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                />
                {formik.touched.confirmPassword &&
                formik.errors.confirmPassword ? (
                  <div className="absolute text-xs text-red-700 mt-1">
                    {formik.errors.confirmPassword}
                  </div>
                ) : null}
              </div>

              <div
                onClick={handleConfirmPasswordToggle}
                className="ml-1 border p-1 h-9"
              >
                {showConfirmPassword ? (
                  <FontAwesomeIcon
                    size="1x"
                    color="#644C99"
                    icon={faEyeSlash}
                  ></FontAwesomeIcon>
                ) : (
                  <FontAwesomeIcon
                    size="1x"
                    color="#644C99"
                    icon={faEye}
                  ></FontAwesomeIcon>
                )}{" "}
              </div>
            </div>
            <div className="bg-cashfer-purple text-white rounded-lg text-center mt-8 hover:opacity-90">
              <button type="submit" className="w-full h-hull p-3">
                {isLoggingIn && (
                  <div className="inline-block animate-spin mr-5">
                    {" "}
                    <Image src="/Spinner-1s-200px.png" width="15" height="15" />
                  </div>
                )}
                {isLoggingIn == true ? "Reseting..." : "Reset Password"}
              </button>
            </div>
          </div>
        </form>
      )}
    </div>
  );
};

export default resetPassword;
